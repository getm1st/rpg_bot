# ability.py

import random
from data_base import insert_status, update_data_base
from sort import hit, damage, dice, check_status

class Ability:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π.
    –ú–µ—Ç–æ–¥—ã:
      - check_conditions(attacker, target) -> bool
      - apply(attacker, target) -> None
    """
    def check_conditions(self, attacker, target):
        raise NotImplementedError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ check_conditions")

    def apply(self, attacker, target):
        raise NotImplementedError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ apply")

# -------------------
# –ü—Ä–∏–º–µ—Ä —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
# -------------------

class Bite_KnockDown(Ability):
    """
    –£–∫—É—Å: –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω, —à–∞–Ω—Å —Å–±–∏—Ç—å —Å –Ω–æ–≥.
    """
    def check_conditions(self, attacker, target):
        return True

    def apply(self, attacker, target):
        print(f"{attacker['name']} –∫—É—Å–∞–µ—Ç {target['name']}, –ø—ã—Ç–∞—è—Å—å —Å–±–∏—Ç—å —Å –Ω–æ–≥!")
        roll = random.randint(1, 20) + attacker.get('strength_mod', 0)
        if roll >= target.get('armor_class', 10):
            insert_status(target, '12', 1)
            print(f"{target['name']} —Å–±–∏—Ç —Å –Ω–æ–≥!")
        else:
            print(f"{target['name']} —É—Å—Ç–æ—è–ª –Ω–∞ –Ω–æ–≥–∞—Ö.")

class Sneak_Attack(Ability):
    """
    –°–∫—Ä—ã—Ç–∞—è –∞—Ç–∞–∫–∞: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–Ω, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.
    """
    def check_conditions(self, attacker, target):
        return attacker.get('dexterity', 0) > target.get('wisdom', 0)

    def apply(self, attacker, target):
        extra = 6
        dmg = damage(attacker) + extra
        target['hitpoints'] -= dmg
        print(f"üí• {attacker['name']} –Ω–∞–Ω–æ—Å–∏—Ç —Å–∫—Ä—ã—Ç–Ω—É—é –∞—Ç–∞–∫—É –∏ –¥–æ–ø. —É—Ä–æ–Ω {dmg}!")

class Drawing_Strength(Ability):
    """
    –ù–µ–∫—Ä–æ—Ç–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞ —Å–æ —Å–Ω–∏–∂–µ–Ω–∏–µ–º –°–∏–ª—ã.
    """
    def check_conditions(self, attacker, target):
        return True

    def apply(self, attacker, target):
        roll = hit(attacker)
        if roll >= target['armor_class']:
            necro = dice('2d6')
            
            target['hitpoints'] -= necro
            
            # —Å–∫–æ–ª—å–∫–æ —Å–∏–ª –æ—Ç–Ω—è—Ç—å
            drain = dice('1d4')
            print(f'–¢–µ–Ω—å —Ç—è–Ω–µ—Ç—Å—è –∫ –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —Å–∏–ª–µ {target['name']} –∏ –ø–æ–≥–ª–æ—â–∞–µ—Ç {drain} –µ–≥–æ —ç–Ω–µ—Ä–≥–∏–∏ —Å—Ç–∞–Ω–æ–≤—è—Å—å —á—É—Ç—å —Ç–µ–º–Ω–µ–µ. ‚öîÔ∏è –ù–∞–Ω–µ—Å–µ–Ω–æ {necro} —É—Ä–æ–Ω–∞! ‚öîÔ∏è')
            strength = target['strength'] - drain # –û–ø—Ä–µ–¥–µ–ª—è—é –∫–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–ª—ã –≤–Ω–µ—Å—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü—É 
            update_data_base('characters','strength', strength, 'user_id', target['id']) # –ú–µ–Ω—è—é –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–ª—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–∞ strength
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º drain
            
            print(f"{target['name']} —Ç–µ—Ä—è–µ—Ç {drain} –æ—á–∫–æ–≤ –°–∏–ª—ã –¥–æ –æ—Ç–¥—ã—Ö–∞!")
            
            status = check_status(target)
            check = False
            
            for i in status:
                if i['status_id'] == 16:
                    check = i['effect_value']
                else:
                    next
            
            if check:
                end_effect = check + drain
            else:
                end_effect = drain
            
            insert_status(
                status_id = 16,
                creature = target,
                remaining_time = None,      # —ç—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç –¥–æ –æ—Ç–¥—ã—Ö–∞
                effect_value = end_effect,       # –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ
                effect_meta = None          # –º–æ–∂–Ω–æ –Ω–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å
            )
# -------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
# -------------------

ABILITY_REGISTRY = {
    'bite_knockdown': Bite_KnockDown,
    'sneak_attack': Sneak_Attack,
    'drawing_strength': Drawing_Strength,
}



def get_ability_instance(name):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –µ—ë snake_case –∏–º–µ–Ω–∏.
    """
    print(f"–ò—â–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {name}")
    cls = ABILITY_REGISTRY.get(name)
    if not cls:
        raise KeyError(f"–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å '{name}' –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
    return cls()
