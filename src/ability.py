class Ability:
    def check_conditions(self, attacker, target):
        raise NotImplementedError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ check_conditions")

    def apply(self, attacker, target):
        raise NotImplementedError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ apply")

# –ü—Ä–∏–º–µ—Ä —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–æ–ª–∫–∞ ‚Äî —É–∫—É—Å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–±–∏—Ç—å —Å –Ω–æ–≥
class Bite_KnockDown(Ability):
    def check_conditions(self, attacker, target):
        return True  # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —É–∂–µ —Å–±–∏—Ç–æ—Å—Ç—å

    def apply(self, attacker, target):
        from data_base import add_status
        import random

        print(f"{attacker['name']} –∫—É—Å–∞–µ—Ç {target['name']}, –ø—ã—Ç–∞—è—Å—å —Å–±–∏—Ç—å —Å –Ω–æ–≥!")
        success = random.randint(1, 20) + attacker.get("strength_mod", 0) >= 12  # –ü—Ä–∏–º–µ—Ä –°–ª
        if success:
            add_status("knock_down", target)
            print(f"{target['name']} —Å–±–∏—Ç —Å –Ω–æ–≥!")
        else:
            print(f"{target['name']} —É—Å—Ç–æ—è–ª –Ω–∞ –Ω–æ–≥–∞—Ö.")

# –ü—Ä–∏–º–µ—Ä —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–ª—É—Ç–∞ ‚Äî —Å–∫—Ä—ã—Ç–∞—è –∞—Ç–∞–∫–∞
class Sneak_Attack(Ability):
    def check_conditions(self, attacker, target):
        return attacker.get("dexterity", 0) > target.get("wisdom", 0)

    def apply(self, attacker, target):
        from sort import damage
        damage_value = damage(attacker) + 6  # –î–æ–ø. —É—Ä–æ–Ω –æ—Ç —Å–∫—Ä—ã—Ç–æ–π –∞—Ç–∞–∫–∏
        target["hitpoints"] -= damage_value
        print(f"üí• {attacker['name']} –ø—Ä–æ–≤–æ–¥–∏—Ç —Å–∫—Ä—ã—Ç–Ω—É—é –∞—Ç–∞–∫—É –ø–æ {target['name']} –∏ –Ω–∞–Ω–æ—Å–∏—Ç {damage_value} —É—Ä–æ–Ω–∞!")
